%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Haskell
file_extensions:
  - hs
scope: source.haskell
contexts:
  main:
    - match: '(`)([\p{Lu}\p{Lt}][\p{Ll}_\p{Lu}\p{Lt}\p{Nd}'']*\.)*[\p{Ll}_][\p{Ll}_\p{Lu}\p{Lt}\p{Nd}'']*(`)'
      comment: "In case this regex seems unusual for an infix operator, note that Haskell allows any ordinary function application (elem 4 [1..10]) to be rewritten as an infix expression (4 `elem` [1..10])."
      scope: keyword.operator.function.infix.haskell
      captures:
        1: punctuation.definition.entity.haskell
        2: punctuation.definition.entity.haskell
    - match: \(\s*\)
      scope: constant.language.unit.haskell
    - match: '\[\s*\]'
      scope: constant.language.empty-list.haskell
    - match: \b(module)(\b(?!'))
      captures:
        1: keyword.other.haskell
      push:
        - meta_scope: meta.declaration.module.haskell
        - match: \b(where)(\b(?!'))
          captures:
            1: keyword.other.haskell
          pop: true
        - include: module_name
        - include: module_exports
        - match: "[a-z]+"
          scope: invalid
    - match: \b(class)(\b(?!'))
      captures:
        1: keyword.other.haskell
      push:
        - meta_scope: meta.declaration.class.haskell
        - match: \b(where)(\b(?!'))
          captures:
            1: keyword.other.haskell
          pop: true
        - include: type_signature
    - match: |-
        (?x)
          \b(data|newtype)
          \s+
          ([\p{Lu}\p{Lt}][\w\p{Nd}_']*)
          ((?:\s+[\p{Ll}][\w\p{Nd}_']*)*?)
          \s+
          (where(?:\b(?!'))|=|$)
      captures:
        1: keyword.other.haskell
        2: storage.type.haskell
        4: keyword.other.haskell
    - match: |-
        (?x)
          \b(type)
          \s+
          ([^=]*)
          (?:
            \s+
            (=)
            (.*)
          )?\s*$
      captures:
        1: keyword.other.haskell
        3: keyword.other.haskell
    - match: \b(instance)(\b(?!'))
      captures:
        1: keyword.other.haskell
      push:
        - meta_scope: meta.declaration.instance.haskell
        - match: \b(where)(\b(?!'))|$
          captures:
            1: keyword.other.haskell
          pop: true
        - include: type_signature
    - match: \b(import)(\b(?!'))
      captures:
        1: keyword.other.haskell
      push:
        - meta_scope: meta.import.haskell
        - match: ($|;|(?=--))
          pop: true
        - match: (qualified|as|hiding)
          scope: keyword.other.haskell
        - include: module_name
        - include: module_exports
    - match: (deriving)\s*\(
      captures:
        1: keyword.other.haskell
      push:
        - meta_scope: meta.deriving.haskell
        - match: \)
          pop: true
        - include: derivings
    - match: '(deriving)\s+([\p{Lu}\p{Lt}][\p{Ll}_\p{Lu}\p{Lt}\p{Nd}'']*)'
      scope: meta.deriving.haskell
      captures:
        1: keyword.other.haskell
        2: entity.other.inherited-class.haskell
    - match: |-
        (?x)\b
        ( deriving
        | where
        | type([\t ]+(family|role))
        | let
        | in
        | default
        | rec
        )(\b(?!'))
      scope: keyword.other.haskell
    - match: '\binfix[lr]?(\b(?!''))'
      scope: keyword.operator.haskell
    - match: \b(m?do|if|then|else|case|of)(\b(?!'))
      scope: keyword.control.haskell
    - match: '\b([0-9]+\.[0-9]+([eE][+-]?[0-9]+)?|[0-9]+[eE][+-]?[0-9]+)\b'
      comment: Floats are always decimal
      scope: constant.numeric.float.haskell
    - match: '\b([0-9]+|0([xX][0-9a-fA-F]+|[oO][0-7]+))\b'
      scope: constant.numeric.haskell
    - match: ^\s*(#)\s*\w+
      comment: In addition to Haskell's "native" syntax, GHC permits the C preprocessor to be run on a source file.
      scope: meta.preprocessor.c
      captures:
        1: punctuation.definition.preprocessor.c
    - include: pragma
    - match: '"'
      captures:
        0: punctuation.definition.string.begin.haskell
      push:
        - meta_scope: string.quoted.double.haskell
        - match: '"'
          captures:
            0: punctuation.definition.string.end.haskell
          pop: true
        - match: '\\(NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\"''\&])'
          scope: constant.character.escape.haskell
        - match: '\\o[0-7]+|\\x[0-9A-Fa-f]+|\\[0-9]+'
          scope: constant.character.escape.octal.haskell
        - match: '\\\^[A-Z@\[\]\\\^_]'
          scope: constant.character.escape.control.haskell
        - match: \\\s
          captures:
            0: constant.character.escape.begin.haskell
          push:
            - match: \\
              captures:
                0: constant.character.escape.end.haskell
              pop: true
            - match: \S+
              scope: invalid.illegal.character-not-allowed-here.haskell
    - match: |-
        (?x)
        (')
        (?:
          [\ -\[\]-~]               # Basic Char
          | (\\(?:NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE
            |DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS
            |US|SP|DEL|[abfnrtv\\\"'\&]))   # Escapes
          | (\\o[0-7]+)               # Octal Escapes
          | (\\x[0-9A-Fa-f]+)           # Hexadecimal Escapes
          | (\^[A-Z@\[\]\\\^_])           # Control Chars
        )
        (')
      scope: string.quoted.single.haskell
      captures:
        1: punctuation.definition.string.begin.haskell
        2: constant.character.escape.haskell
        3: constant.character.escape.octal.haskell
        4: constant.character.escape.hexadecimal.haskell
        5: constant.character.escape.control.haskell
        6: punctuation.definition.string.end.haskell
    - match: |-
        (?x)^(\s*)
        (?<fn>
          (?:
            [\p{Ll}_][\p{Ll}_\p{Lu}\p{Lt}\p{Nd}']* |
            \(
              (?!--+\))
              (?:
                (?![(),;\[\]`{}_"'])[\p{S}\p{P}]
              )+
            \)
          )
          (?:\s*,\s*\g<fn>)?
        )
        \s*(::|∷)
      captures:
        3: keyword.other.double-colon.haskell
      push:
        - meta_scope: meta.function.type-declaration.haskell
        - match: '(?=(<\-)|(^(\1)?[^\s]|}))'
          pop: true
        - include: type_signature
    - include: data_constructor
    - include: comments
    - include: infix_op
    - match: (::|∷)
      captures:
        1: keyword.other.double-colon.haskell
      push:
        - meta_scope: meta.type-declaration.haskell
        - match: '(?=\)|$|,|}|\b(in|then|else|of)\b(?!'')|(:?<\-))'
          pop: true
        - include: type_signature
    - match: '[\p{S}\p{P}&&[^(),;\[\]`{}_"'']]+'
      comment: In case this regex seems overly general, note that Haskell permits the definition of new operators which can be nearly any string of punctuation characters, such as $%^&*.
      scope: keyword.operator.haskell
    - match: ","
      scope: punctuation.separator.comma.haskell
  block_comment:
    - match: '\{-(?!#)'
      captures:
        0: punctuation.definition.comment.haskell
      push:
        - meta_scope: comment.block.haskell
        - include: block_comment
        - match: '-\}'
          captures:
            0: punctuation.definition.comment.haskell
          pop: true
  comments:
    - match: ^\s*(--\s+\|)
      captures:
        1: punctuation.whitespace.comment.leading.haskell
      push:
        - meta_scope: comment.block.documentation.haskell
        - match: (?=^(?!\s*--\s))
          pop: true
    - match: '\{-\|'
      captures:
        0: punctuation.definition.comment.haskell
      push:
        - meta_scope: comment.block.documentation.haskell
        - include: block_comment
        - match: '-\}'
          captures:
            0: punctuation.definition.comment.haskell
          pop: true
    - match: '(^[ \t]+)?(?=--+(?![\p{S}\p{P}&&[^(),;\[\]`{}_"'']]))'
      comment: Operators may begin with '--' as long as they are not entirely composed of '-' characters. This means comments can't be immediately followed by an allowable operator character.
      captures:
        1: punctuation.whitespace.comment.leading.haskell
      push:
        - match: (?!\G)
          pop: true
        - match: "--"
          captures:
            0: punctuation.definition.comment.haskell
          push:
            - meta_scope: comment.line.double-dash.haskell
            - match: \n
              pop: true
    - include: block_comment
  data_constructor:
    - match: '\b[\p{Lu}\p{Lt}][\p{Ll}_\p{Lu}\p{Lt}\p{Nd}'']*\b'
      scope: constant.other.haskell
  derivings:
    - match: '\b[\p{Lu}\p{Lt}][\p{Ll}_\p{Lu}\p{Lt}\p{Nd}'']*'
      scope: entity.other.inherited-class.haskell
    - match: \(
      push:
        - match: \)
          pop: true
        - include: derivings
  infix_op:
    - match: '(\((?!--+\))[\p{S}\p{P}&&[^(),;\[\]`{}_"'']]+\)|\(,+\))'
      comment: An operator cannot be composed entirely of '-' characters; instead, it should be matched as a comment.
      scope: entity.name.function.infix.haskell
  module_exports:
    - match: \(
      push:
        - meta_scope: meta.declaration.exports.haskell
        - match: \)
          pop: true
        - match: '\b[\p{Ll}_][\p{Ll}_\p{Lu}\p{Lt}\p{Nd}'']*'
          scope: entity.name.function.haskell
        - match: '\b[\p{Lu}\p{Lt}][\p{Ll}_\p{Lu}\p{Lt}\p{Nd}'']*'
          scope: storage.type.haskell
        - match: ","
          scope: punctuation.separator.comma.haskell
        - include: infix_op
        - match: \(.*?\)
          comment: So named because I don't know what to call this.
          scope: meta.other.unknown.haskell
        - include: comments
  module_name:
    - match: '(?<conid>[\p{Lu}\p{Lt}][\p{Ll}_\p{Lu}\p{Lt}\p{Nd}'']*(\.\g<conid>)?)'
      scope: support.other.module.haskell
  pragma:
    - match: '\{-#'
      push:
        - meta_scope: meta.preprocessor.haskell
        - match: '#-\}'
          pop: true
        - match: \b(LANGUAGE|OPTIONS_GHC|INCLUDE|WARNING|DEPRECATED|MINIMAL|UNPACK|NOUNPACK|SOURCE|OVERLAPPING|OVERLAPPABLE|OVERLAPS|INCOHERENT|INLINE|NOINLINE|INLINABLE|CONLIKE|LINE|RULES|SPECIALIZE|SPECIALISE)\b
          scope: keyword.other.preprocessor.haskell
  type_signature:
    - match: \(\s*\)
      scope: support.constant.unit.haskell
    - match: \(
      push:
        - match: \)
          pop: true
        - match: ","
        - include: type_signature
    - match: '\(\s*([\p{Lu}\p{Lt}][\p{Ll}_\p{Lu}\p{Lt}\p{Nd}'']*)\s+([\p{Ll}_][\p{Ll}_\p{Lu}\p{Lt}\p{Nd}'']*)\)\s*(=>|⇒)'
      scope: meta.class-constraint.haskell
      captures:
        1: entity.other.inherited-class.haskell
        2: variable.other.generic-type.haskell
        3: keyword.other.big-arrow.haskell
    - include: pragma
    - match: "->|→"
      scope: keyword.other.arrow.haskell
    - match: \b(forall|∀)(\b(?!'))
      scope: keyword.other.forall.haskell
    - match: "=>|⇒"
      scope: keyword.other.big-arrow.haskell
    - match: '\b[\p{Ll}_][\p{Ll}_\p{Lu}\p{Lt}\p{Nd}'']*'
      scope: variable.other.generic-type.haskell
    - match: '\b[\p{Lu}\p{Lt}][\p{Ll}_\p{Lu}\p{Lt}\p{Nd}'']*'
      scope: storage.type.haskell
    - include: comments
